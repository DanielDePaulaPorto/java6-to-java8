:java-package: src/org/j6toj8/languageenhancements
:section-java-package: ../../../{java-package}

=== Try-with-resources (Try com recursos)

.Objetivo
----
Develop code that uses try-with-resources statements, including using classes that implement the AutoCloseable interface
-
Desenvolver código que utilize instruções try-with-resources, incluindo o uso de classes que implementam a interface AutoCloseable
----

É esperado que o candidato saiba compreender e analisar o uso da instrução try-with-resources, incluindo classes que implementam a interface `AutoClosable`. 

Antes de continuar, tente entender o que a execução do método `main` do exemplo abaixo irá apresentar no console.

[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_01_Complete.java
----
include::{section-java-package}/trywithresources/TryWithResouces_01_Complete.java[tag=code]
----

O código acima utiliza dois arquivos, e faz leitura e escrita neles. A grande novidade desse código é a declaração de variáveis dentro de parênteses após a instrução `try`. Isso é a sintaxe chamada try-with-resources, e ela chama automaticamente o método `close()` dos recursos sendo utilizados. Até o Java 6, seria necessário chamar o `close()` manualmente, como no exemplo abaixo.

[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_02_Java6.java
----
include::{section-java-package}/trywithresources/TryWithResouces_02_Java6.java[tag=code]
----

. A instrução try-with-resources fecha automaticamente os recursos que implementam a interface `AutoCloseable`.
. Ela não precisa de `catch` nem `finally` explícitos.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_03_AutoCloseable.java
----
include::{section-java-package}/trywithresources/TryWithResouces_03_AutoCloseable.java[tag=code]
----
O exemplo acima possui a seguinte saída no console:
+
.Saída no console
[source,console]
----
try
Porta fechada.
----
. A instrução try-with-resources ainda pode ter `catch` e `finally`, apesar de não ser necessário. Nesse caso, os recursos são fechados depois do `try` e antes de qualquer `catch` ou `finally`.
. O método `close` pode lançar uma exceção, e ela será capturada pelo `catch` caso ele exista.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_04_WithCatchFinally.java
----
include::{section-java-package}/trywithresources/TryWithResouces_04_WithCatchFinally.java[tag=code]
----
Nesse caso temos a seguinte saída no console:
+
.Saída no console
[source,console]
----
try
Porta fechada.
catch
finally
----
Ou seja, primeiro o `try` é chamado. Logo depois o método `close()` é chamado e ao final lança uma exceção. O `catch` captura essa exceção. E finalmente o `finally` é chamado.

. Os recursos declarados na instrução try-with-resources são fechados na ordem inversa da declaração.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_05_Order.java
----
include::{section-java-package}/trywithresources/TryWithResouces_05_Order.java[tag=code]
----
O exemplo acima imprime:
+
.Saída no console
[source,console]
----
Olá.
Gaveta fechada.
Porta fechada.
----
Ou seja, como a ordem de declaração dentro do try-with-resources foi `Porta` e depois `Gaveta`, a ordem de chamada do método `close` é inversa: `Gaveta` e depois `Porta`.	

. Os recursos declarados no try-with-resources só estão disponível dentro do bloco `try`.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_06_ResourceInsideTry.java
----
include::{section-java-package}/trywithresources/TryWithResouces_06_ResourceInsideTry.java[tag=code]
----

. Somente classes que implementam `AutoCloseable` podem ser utilizadas dentro do try-with-resources
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_07_NoAutoCloseable.java
----
include::{section-java-package}/trywithresources/TryWithResouces_07_NoAutoCloseable.java[tag=code]
----

. Caso o método `close()` lance uma exceção checada (ou seja, que herda de `Exception`), o código só compila se existir um `catch` que capture aquela exceção, ou o método declare o `throws`.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_08_CloseException.java
----
include::{section-java-package}/trywithresources/TryWithResouces_08_CloseException.java[tag=code]
----

. O Java 5 já possuía uma interface chamada `Closeable`, porém ela permite lançar apenas `IOException`. A nova interface `AutoCloseable` permite lançar qualquer exceção. Como `Closeable` atende a implementação de `AutoCloseable`, ela agora estende `AutoCloseable`. Logo, todas as classes que já implementavam `Closeable` podem ser utilizadas dentro do try-with-resources. Veja abaixo como era a interface `Closeable` antes e a partir do Java 7:
+
.Antes do Java 7
[source,java]
----
public interface Closeable {
  public void close() throws IOException;
}
----
+
.A partir do Java 7
[source,java]
----
public interface Closeable extends AutoCloseable {
  public void close() throws IOException;
}
----

Alguns tipos que implementam `Closeable`::
* `InputStream` e suas subclasses (`FileInputStream`, `ObjectInputStream`, etc)
* `OutputStream` e suas subclasses (`ByteArrayOutputStream`, `FileOutputStream`, etc)
* `Reader` e suas subclasses (`BufferedReader`, `CharSequenceReader`)
* `Writer` e suas subclasses (`BufferedWriter`, `PrintWriter`, etc)

. Um comportamento novo são as exceções suprimidas (suppressed). Se ambos o bloco `try` e o método `close` lançam exceção, a do `close` fica suprimida, pois a do `try` é lançada primeiro.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_09_Suppressed.java
----
include::{section-java-package}/trywithresources/TryWithResouces_09_Suppressed.java[tag=code]
----
O exemplo acima imprime no console:
+
.Saída no console
[source,console]
----
try
close
erro no try
erro no close
----
Ou seja, a exceção que de fato foi capturada foi a do bloco `try`, pois foi lançada primeiro. A exceção lançada pelo método `close` ficou suprimida, e fica disponível em um array no método `getSuppressed()` da exceção.

. E por fim, é necessário lembrar que a instrução `try` "comum" ainda precisa obrigatoriamente de um `catch` ou `finally`.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_10_CommonTry.java
----
include::{section-java-package}/trywithresources/TryWithResouces_10_CommonTry.java[tag=code]
----
