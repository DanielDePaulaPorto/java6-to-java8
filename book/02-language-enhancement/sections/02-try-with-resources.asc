=== Try-with-resources (Try com recursos)

.Objetivo
----
Develop code that uses try-with-resources statements, including using classes that implement the AutoCloseable interface

-

Desenvolver código que utilize instruções try-with-resources, incluindo o uso de classes que implementam a interface AutoCloseable
----

É esperado que o candidato saiba compreender e analisar o uso da instrução try-with-resources, incluindo classes que implementam a interface AutoClosable. 

Antes de continuar, tente entender o que a execução do método main do exemplo abaixo irá apresentar no console.

[source,java]
----
public static void main(String[] args) throws IOException {
	// criação de 2 arquivos
	File file = new File("arquivo.txt");
	File file2 = new File("arquivo2.txt");
	
	// Exemplo try-with-resources com PrintWriter
	try (PrintWriter writer = new PrintWriter(file)) {
		// escreve no arquivo.txt
		writer.println("Olá Mundo!");
	}
	
	// Exemplo try-with-resources com BufferedReader
	try (BufferedReader reader = Files.newBufferedReader(file.toPath())) {
		// imprime no console uma linha do arquivo.txt
		System.out.println(reader.readLine());
	}
	
	// Exemplo try-with-resources com BufferedReader e BufferedWriter
	try (BufferedReader reader = Files.newBufferedReader(file.toPath());
		 BufferedWriter writer = Files.newBufferedWriter(file2.toPath())) {
		// lê a linha do arquivo.txt e escreve no arquivo2.txt
		writer.write(reader.readLine() + "2");
	}
	
	// Exemplo try-with-resources com BufferedReader
	try (BufferedReader reader = Files.newBufferedReader(file2.toPath())) {
		// imprime no console uma linha do arquivo2.txt
		System.out.println(reader.readLine());
	}
	
	// todos os Reader e Writer já foram fechados.
}
----

O código acima utiliza dois arquivos, e faz leitura e escrita neles. A grande novidade desse código é a declaração de variáveis dentro de parênteses após a instrução `try`. Isso é a sintaxe chamada try-with-resources, e ela chama automaticamente o método `close()` dos recursos sendo utilizados. Até o Java 6, seria necessário chamar o `close()` manualmente, como no exemplo abaixo.

.exemplo
[source,java]
----
File file = new File("arquivo.txt");
PrintWriter writer = null;
try {
	writer = new PrintWriter(file);
	writer.println("Olá Mundo!");
} finally {
	if (writer != null) {
		writer.close(); // fechando o writer manualmente
	}
}
----

. A instrução try-with-resources fecha automaticamente os recursos que implementam a interface `AutoCloseable`.
. Ela não precisa de `catch` nem `finally` explícitos.
+
.exemplo
[source,java]
----
static class Porta implements AutoCloseable {
	@Override
	public void close() { // chamado automaticamente pelo try-with-resources
		System.out.println("Porta fechada.");
	}
}

public static void main(String[] args) throws FileNotFoundException {
	try (Porta porta = new Porta()) { // Porta instanciada dentro da instrução try-with-resources
		System.out.println("try");
	}
}
----

O exemplo acima possui a seguinte saída no console:

.saída no console
[source,console]
----
try
Porta fechada.
----

. A instrução try-with-resources ainda pode ter catch e finally, apesar de não ser necessário. Nesse caso, os recursos são fechados depois do try e antes de qualquer catch ou finally.
. O método close pode lançar uma exceção, e ela será capturada pelo catch caso ele exista.
+
.exemplo
[source,java]
----
static class Porta implements AutoCloseable {
	@Override
	public void close() throws Exception { // chamado automaticamente pelo try-with-resources
		System.out.println("Porta fechada.");
		throw new Exception(); // lança Exception
	}
}

public static void main(String[] args) throws FileNotFoundException {
	try (Porta porta = new Porta()) { // Porta instanciada dentro da instrução try-with-resources
		System.out.println("try");
	} catch (Exception e) {
		System.out.println("catch");
	} finally {
		System.out.println("finally");
	}
}
----

Nesse caso temos a seguinte saída no console:

.saída no console
[source,console]
----
try
Porta fechada.
catch
finally
----

Ou seja, primeiro o try é chamado. Logo depois o método close() é chamado e ao final lança uma exceção. O catch captura essa exceção. E finalmente o finally é chamado.

. Os recursos declarados na instrução try-with-resources são fechados na ordem inversa da declaração.
+
.exemplo
[source,java]
----
static class Porta implements AutoCloseable {
	@Override
	public void close() { // chamado automaticamente pelo try-with-resources
		System.out.println("Porta fechada.");
	}
}

static class Gaveta implements AutoCloseable {
	@Override
	public void close() { // chamado automaticamente pelo try-with-resources
		System.out.println("Gaveta fechada.");
	}
}

public static void main(String[] args) {
	try (Porta porta = new Porta();
		 Gaveta gaveta = new Gaveta()) {
		System.out.println("Olá.");
	}
}
----

O exemplo acima imprime:

.saída no console
[source,console]
----
Olá.
Gaveta fechada.
Porta fechada.
----

Ou seja, como a ordem de declaração dentro do try-with-resources foi Porta e depois Gaveta, a ordem de chamada do método close é inversa: Gaveta e depois Porta.	

. Os recursos declarados no try-with-resources só estão disponível dentro do bloco try.
+
.exemplo
[source,java]
----
try (Porta porta = new Porta()) {
	porta.toString();
} catch (Exception e) {
	porta.toString(); // NÃO COMPILA - variável porta só disponível dentro do bloco try
} finally {
	porta.toString(); // NÃO COMPILA - variável porta só disponível dentro do bloco try
}
----

. Somente classes que implementam AutoCloseable podem ser utilizadas dentro do try-with-resources
+
.exemplo
[source,java]
----
static class Prateleira {}

public static void main(String[] args) {
	try (Prateleira prateleira = new Prateleira()) { // NÃO COMPILA - Prateleira não implementa AutoClosable
		System.out.println("Olá");
	}
}
----

. Caso o método close() lance uma exceção checada (ou seja, que herda de Exception), o código só compila se existir um catch que capture aquela exceção, ou o método declare o throws.
+
.exemplo
[source,java]
----
static class Porta implements AutoCloseable {
	@Override
	public void close() throws Exception { // declara throws Exception obrigatoriamente 
		throw new Exception();
	}
}

void try1() {
	try (Porta porta = new Porta()) { // NÃO COMPILA - exceção do close() não é capturada nem declarada
		System.out.println("Olá 1");
	}
}

void try2() {
	try (Porta porta = new Porta()) {
		System.out.println("Olá 2");
	} catch (Exception e) { // COMPILA - exceção capturada
	}
}

void try3() throws Exception { // COMPILA - exceção declarada no método
	try (Porta porta = new Porta()) {
		System.out.println("Olá 3");
	}
}
----

. O Java 5 já possuía uma interface chamada Closeable, porém ela permite lançar apenas IOException. A nova interface AutoCloseable permite lançar qualquer exceção. Como Closeable atende a implementação de AutoCloseable, ela agora estende AutoCloseable. Logo, todas as classes que já implementavam Closeable podem ser utilizadas dentro do try-with-resources. Veja abaixo como era a interface Closeable antes e a partir do Java 7:
+
.Antes do Java 7
[source,java]
----
public interface Closeable {
	public void close() throws IOException;
}
----
.A partir do Java 7
[source,java]
----
public interface Closeable extends AutoCloseable {
	public void close() throws IOException;
}
----

. Um comportamento novo são as exceções suprimidas (suppressed). Se ambos o bloco try e o método close lançam exceção, a do close fica suprimida, pois a do try é lançada primeiro.
+
.exemplo
[source,java]
----
static class Porta implements AutoCloseable {
	@Override
	public void close() {
		System.out.println("close");
		throw new RuntimeException("erro no close"); // lança RuntimeException, mas só depois do try
	}
}

public static void main(String[] args) {
	try (Porta porta = new Porta()) {
		System.out.println("try");
		throw new RuntimeException("erro no try"); // lança RuntimeException
	} catch (RuntimeException e) { // captura RuntimeException - qual foi capturada?
		System.out.println(e.getMessage()); // apresenta a mensagem da exceção do try
		System.out.println(e.getSuppressed()[0].getMessage()); // apresenta a mensagem da exceção suprimida, ou seja, do close
	}
}
----

O exemplo acima imprime no console:

.saída no console
[source,console]
----
try
close
erro no try
erro no close
----

Ou seja, a exceção que de fato foi capturada foi a do bloco try, pois foi lançada primeiro. A exceção lançada pelo método close ficou suprimida, e fica disponível em um array disponível no método getSuppressed() da exceção.

. E por fim, é necessário lembrar que a instrução try "comum" ainda precisa obrigatoriamente de um catch ou finally.
+

.exemplo
[source,java]
----
try {
	System.out.println("try");
} // NÃO COMPILA - try "comum" sem catch ou finally

try {
	System.out.println("try");
} catch (Exception e) {
} // COMPILA - try "comum" só com catch

try {
	System.out.println("try");
} finally {
} // COMPILA - try "comum" só com finally

try {
	System.out.println("try");
} catch (Exception e) {
} finally {
} // COMPILA - try "comum" com catch e finally
----