:java-package: src/org/j6toj8/localization
:section-java-package: ../../../{java-package}
:resource-package: ../../../resources

=== Resource Bundle

.Objetivo
--------------------------------------------------
Create and manage date- and time-based events by using LocalDate, LocalTime, LocalDateTime, Instant, Period, and Duration, including a combination of date and time in a single object.
-
Crie e gerencie eventos baseados em data e hora utilizando LocalDate, LocalTime, LocalDateTime, Instant, Period, e Duration, incluindo combinação de data e hora em um único objeto. 
--------------------------------------------------

O Java 8 possui uma forma totalmente nova de lidar com data e hora. Várias classes novas foram introduzidas no pacote `java.time.*`. Vejamos a seguir alguns exemplos no formado ISO-8601.

* `LocalDate` -> Data sem fuso horário, como `2007-12-03`.
* `LocalTime` -> Hora sem fuso horário, como `10:15:30`.
* `LocalDateTime` -> Uma data com hora sem fuso horário, como `2007-12-03T10:15:30`.
* `ZonedDateTime` -> Uma data com hora e com fuso horário, como `2007-12-03T10:15:30+01:00 Europe/Paris`.
* `Instant` -> Um ponto na linha do tempo, um instante.
* `Period` -> Uma quantidade de tempo baseado em data, como "2 anos, 3 meses and 4 dias".
* `Duration` -> Uma quantidade de tempo baseado em hora, como "34,5 segundos".

Essas novas classes foram melhor projetadas para lidar com os conceitos de data, hora e tempo. As classes antigas, `java.util.Date` e `java.util.Calendar`, não caem na prova de certificação.

Quase todas essas classes serão apresentadas nessa seção. A única exceção é `ZonedDateTime`, que será apresentada na seção de fusos horários e horário de verão.

Todas as novas classes são https://pt.wikipedia.org/wiki/Objeto_imut%C3%A1vel[imutáveis] e https://pt.wikipedia.org/wiki/Thread_safety[_thread safe_]. Ou seja, não é necessário se preocupar com concorrência.

==== LocalDate

Um `LocalDate` representa uma data sem fuso horário, como `2007-12-03`.

. A prova geralmente irá utilizar datas no formato americano: `mes/dia/ano`.
. É possível criar um `LocalDate` através do método `static` chamado `now`.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_02_Now.java
----
include::{section-java-package}/datetime/localdate/LocalDate_02_Now.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20
----
+
A saída no console irá apresentar a data atual.

. Também é possível criar um `LocalDate` através do método `static` chamado `of`.
. Você pode utilizar o `enum` `Month` ou um `int` para representar o mês.
. Diferente das APIs antigas do Java, o mês agora começa no número `1`, que é Janeiro.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_03_Of.java
----
include::{section-java-package}/datetime/localdate/LocalDate_03_Of.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20
2019-05-20
----

. Assim como todas a novas classes de data e hora, não é possível criar uma instância de `LocalDate` utilizando o construtor.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_04_Constructor.java
----
include::{section-java-package}/datetime/localdate/LocalDate_04_Constructor.java[tag=code]
----

. Será lançada a exceção `DateTimeException` ao tentar criar uma data inválida.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_05_Invalid.java
----
include::{section-java-package}/datetime/localdate/LocalDate_05_Invalid.java[tag=code]
----
+
.Saída no console
[source,console]
----
Exception in thread "main" java.time.DateTimeException: Invalid value for DayOfMonth (valid values 1 - 28/31): 33
	at java.time.temporal.ValueRange.checkValidValue(ValueRange.java:311)
	at java.time.temporal.ChronoField.checkValidValue(ChronoField.java:703)
	at java.time.LocalDate.of(LocalDate.java:248)
	at org.j6toj8.localization.datetime.localdate.LocalDate_05_Invalid.main(LocalDate_05_Invalid.java:10)
----

. Existem vários métodos para somar e subtrair de `LocalDate`.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_06_Manipulate.java
----
include::{section-java-package}/datetime/localdate/LocalDate_06_Manipulate.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20
+2 dias: 2019-05-22
+2 semanas: 2019-06-03
+2 meses: 2019-07-20
+2 anos: 2021-05-20
+2 anos: 2021-05-20
+2 décadas: 2039-05-20
-2 dias: 2019-05-18
-2 semanas: 2019-05-06
-2 meses: 2019-03-20
-2 anos: 2017-05-20
-2 décadas: 1999-05-20
----

. `LocalDate` é imutável, então é necessário armazenar o retorno de uma alteração em uma variável.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_07_Immutability.java
----
include::{section-java-package}/datetime/localdate/LocalDate_07_Immutability.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20
2019-05-20
2019-05-21
----

. É comum utilizar o encadeamento de chamadas com esses métodos.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_08_Chaining.java
----
include::{section-java-package}/datetime/localdate/LocalDate_08_Chaining.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20
2020-06-21
----

==== LocalTime

==== LocalDateTime

==== Instant

==== Period

==== Duration

.Referências
****

* Working with Dates and Times
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 234). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-8-date-time-intro[Introduction to the Java 8 Date/Time API.]

* https://docs.oracle.com/javase/tutorial/datetime/TOC.html[Trail: Date Time: Table of Contents.] The Java™ Tutorials.

****