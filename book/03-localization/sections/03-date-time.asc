:java-package: src/org/j6toj8/localization
:section-java-package: ../../../{java-package}

=== Resource Bundle

.Objetivo
--------------------------------------------------
Create and manage date- and time-based events by using LocalDate, LocalTime, LocalDateTime, Instant, Period, and Duration, including a combination of date and time in a single object.
-
Crie e gerencie eventos baseados em data e hora utilizando LocalDate, LocalTime, LocalDateTime, Instant, Period, e Duration, incluindo combinação de data e hora em um único objeto. 
--------------------------------------------------

O Java 8 possui uma forma totalmente nova de lidar com data e hora. Várias classes novas foram introduzidas no pacote `java.time.*`. Vejamos a seguir alguns exemplos no formado ISO-8601.

* `LocalDate` -> Data sem fuso horário, como `2007-12-03`.
* `LocalTime` -> Hora sem fuso horário, como `10:15:30.125`.
* `LocalDateTime` -> Uma data com hora sem fuso horário, como `2007-12-03T10:15:30.125`.
* `ZonedDateTime` -> Uma data com hora e com fuso horário, como `2007-12-03T10:15:30.125+01:00 Europe/Paris`.
* `Instant` -> Um ponto na linha do tempo, um instante.
* `Period` -> Uma quantidade de tempo baseado em data, como "2 anos, 3 meses and 4 dias".
* `Duration` -> Uma quantidade de tempo baseado em hora, como "34,5 segundos".

Essas novas classes foram melhor projetadas para lidar com os conceitos de data, hora e tempo. As classes antigas, `java.util.Date` e `java.util.Calendar`, não caem na prova de certificação.

Quase todas essas classes serão apresentadas nessa seção. A única exceção é `ZonedDateTime`, que será apresentada na seção de fusos horários e horário de verão.

Todas as novas classes são https://pt.wikipedia.org/wiki/Objeto_imut%C3%A1vel[imutáveis] e https://pt.wikipedia.org/wiki/Thread_safety[_thread safe_]. Ou seja, não é necessário se preocupar com concorrência.

==== LocalDate

Um `LocalDate` representa uma data sem fuso horário, como `2007-12-03`.

. A prova geralmente irá utilizar datas no formato americano: `mes/dia/ano`.
. É possível criar um `LocalDate` através do método `static` chamado `now`.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_02_Now.java
----
include::{section-java-package}/datetime/localdate/LocalDate_02_Now.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20
----
+
A saída no console irá apresentar a data atual.

. Também é possível criar um `LocalDate` através do método `static` chamado `of`.
. Você pode utilizar o `enum` `Month` ou um `int` para representar o mês.
. Diferente das APIs antigas do Java, o mês agora começa no número `1`, que é Janeiro.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_03_Of.java
----
include::{section-java-package}/datetime/localdate/LocalDate_03_Of.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20
2019-05-20
----

. Assim como todas a novas classes de data e hora, não é possível criar uma instância de `LocalDate` utilizando o construtor.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_04_Constructor.java
----
include::{section-java-package}/datetime/localdate/LocalDate_04_Constructor.java[tag=code]
----

. Será lançada a exceção `DateTimeException` ao tentar criar uma data inválida.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_05_Invalid.java
----
include::{section-java-package}/datetime/localdate/LocalDate_05_Invalid.java[tag=code]
----
+
.Saída no console
[source,console]
----
Exception in thread "main" java.time.DateTimeException: Invalid value for DayOfMonth (valid values 1 - 28/31): 33
	at java.time.temporal.ValueRange.checkValidValue(ValueRange.java:311)
	at java.time.temporal.ChronoField.checkValidValue(ChronoField.java:703)
	at java.time.LocalDate.of(LocalDate.java:248)
	at org.j6toj8.localization.datetime.localdate.LocalDate_05_Invalid.main(LocalDate_05_Invalid.java:10)
----

. Existem vários métodos para somar e subtrair de `LocalDate`.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_06_Manipulate.java
----
include::{section-java-package}/datetime/localdate/LocalDate_06_Manipulate.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20
+2 dias: 2019-05-22
+2 semanas: 2019-06-03
+2 meses: 2019-07-20
+2 anos: 2021-05-20
+2 anos: 2021-05-20
+2 décadas: 2039-05-20
-2 dias: 2019-05-18
-2 semanas: 2019-05-06
-2 meses: 2019-03-20
-2 anos: 2017-05-20
-2 décadas: 1999-05-20
----

. `LocalDate` é imutável, então é necessário armazenar o retorno de uma alteração em uma variável.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_07_Immutability.java
----
include::{section-java-package}/datetime/localdate/LocalDate_07_Immutability.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20
2019-05-20
2019-05-21
----

. É comum utilizar o encadeamento de chamadas com esses métodos.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_08_Chaining.java
----
include::{section-java-package}/datetime/localdate/LocalDate_08_Chaining.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20
2020-06-21
----

. Ao manipular a data, o `LocalDate` irá manipular os meses e anos conforme necessário.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_09_AdjustDifferentUnit.java
----
include::{section-java-package}/datetime/localdate/LocalDate_09_AdjustDifferentUnit.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-11-30
2019-12-01
2020-01-01
2020-01-30
----

==== LocalTime

Um `LocalTime` representa uma hora sem fuso horário e sem data, como `10:15:30.125`.

. A hora é representada no formato `hora:minuto:segundo.nano`.
. É possível criar um `LocalTime` através do método `static` chamado `now`.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_02_Now.java
----
include::{section-java-package}/datetime/localtime/LocalTime_02_Now.java[tag=code]
----
+
.Saída no console
[source,console]
----
09:15:23.197
----
+
A saída no console irá apresentar a hora atual.

. Também é possível criar um `LocalTime` através do método `static` chamado `of`.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_03_Of.java
----
include::{section-java-package}/datetime/localtime/LocalTime_03_Of.java[tag=code]
----
+
.Saída no console
[source,console]
----
09:20:01.135
09:20:01.000000135
09:20:01
09:20
----

. Assim como todas a novas classes de data e hora, não é possível criar uma instância de `LocalTime` utilizando o construtor.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_04_Constructor.java
----
include::{section-java-package}/datetime/localtime/LocalTime_04_Constructor.java[tag=code]
----

. Será lançada a exceção `DateTimeException` ao tentar criar uma hora inválida.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_05_Invalid.java
----
include::{section-java-package}/datetime/localtime/LocalTime_05_Invalid.java[tag=code]
----
+
.Saída no console
[source,console]
----
Exception in thread "main" java.time.DateTimeException: Invalid value for HourOfDay (valid values 0 - 23): 24
	at java.time.temporal.ValueRange.checkValidValue(ValueRange.java:311)
	at java.time.temporal.ChronoField.checkValidValue(ChronoField.java:703)
	at java.time.LocalTime.of(LocalTime.java:317)
	at org.j6toj8.localization.datetime.localtime.LocalTime_05_Invalid.main(LocalTime_05_Invalid.java:9)
----

. Existem vários métodos para somar e subtrair de `LocalTime`.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_06_Manipulate.java
----
include::{section-java-package}/datetime/localtime/LocalTime_06_Manipulate.java[tag=code]
----
+
.Saída no console
[source,console]
----
09:26:12
+2 horas: 11:26:12
+2 minutos: 09:28:12
+2 segundos: 09:26:14
+2 nanosegundos: 09:26:12.000000002
+2 microssegundos: 09:26:12.000002
+2 milissegundos: 09:26:12.002
-2 horas: 07:26:12
-2 minutos: 09:24:12
-2 segundos: 09:26:10
-2 nanosegundos: 09:26:11.999999998
-2 microssegundos: 09:26:11.999998
-2 milissegundos: 09:26:11.998
----

. `LocalTime` é imutável, então é necessário armazenar o retorno de uma alteração em uma variável.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_07_Immutability.java
----
include::{section-java-package}/datetime/localtime/LocalTime_07_Immutability.java[tag=code]
----
+
.Saída no console
[source,console]
----
09:31:05
09:31:05
10:31:05
----

. É comum utilizar o encadeamento de chamadas com esses métodos.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_08_Chaining.java
----
include::{section-java-package}/datetime/localtime/LocalTime_08_Chaining.java[tag=code]
----
+
.Saída no console
[source,console]
----
09:32:05
10:33:06.001
----

. Ao manipular a hora, o `LocalTime` irá manipular as horas, minutos e segundos conforme necessário.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_09_AdjustDifferentUnit.java
----
include::{section-java-package}/datetime/localtime/LocalTime_09_AdjustDifferentUnit.java[tag=code]
----
+
.Saída no console
[source,console]
----
09:59:59
10:00:01
10:01:01
10:01:59
09:59:58
----

==== LocalDateTime

Um `LocalDateTime` representa uma data com hora, mas sem fuso horário, como `2007-12-03T10:15:30.125`.

As regras para o `LocalDateTime` são basicamente a junção daquelas para `LocalDate` e `LocalTime`.

. O `LocalDateTime` é apresentado no formato `ano-mes-diaThora:minuto:segundo.nano`.
. É possível criar um `LocalDateTime` através do método `static` chamado `now`.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_02_Now.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_02_Now.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-24T10:13:58.370
----
+
A saída no console irá apresentar a data e hora atual.

. Também é possível criar um `LocalDateTime` através do método `static` chamado `of`.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_03_Of.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_03_Of.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20T09:20:12
2019-05-20T09:20
2019-05-20T09:20
2019-05-20T09:20:12
2019-05-20T09:20:12
2019-05-20T09:20:12.000000135
2019-05-20T09:20:12.000000135
----

. Assim como todas a novas classes de data e hora, não é possível criar uma instância de `LocalDateTime` utilizando o construtor.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_04_Constructor.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_04_Constructor.java[tag=code]
----

. Será lançada a exceção `DateTimeException` ao tentar criar uma data ou hora inválida.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_05_Invalid.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_05_Invalid.java[tag=code]
----
+
.Saída no console
[source,console]
----
Exception in thread "main" java.time.DateTimeException: Invalid date 'APRIL 31'
	at java.time.LocalDate.create(LocalDate.java:431)
	at java.time.LocalDate.of(LocalDate.java:269)
	at java.time.LocalDateTime.of(LocalDateTime.java:311)
	at org.j6toj8.localization.datetime.localdatetime.LocalDateTime_05_Invalid.main(LocalDateTime_05_Invalid.java:10)
----

. Existem vários métodos para somar e subtrair de `LocalDateTime`. São basicamente todos os disponíveis para `LocalDate` e `LocalTime`.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_06_Manipulate.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_06_Manipulate.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20T09:20:12
+2 horas: 2019-05-20T11:20:12
+2 minutos: 2019-05-20T09:22:12
+2 segundos: 2019-05-20T09:20:14
+2 nanosegundos: 2019-05-20T09:20:12.000000002
+2 microssegundos: 2019-05-20T09:20:12.000002
+2 milissegundos: 2019-05-20T09:20:12.002
-2 horas: 2019-05-20T07:20:12
-2 minutos: 2019-05-20T09:18:12
-2 segundos: 2019-05-20T09:20:10
-2 nanosegundos: 2019-05-20T09:20:11.999999998
-2 microssegundos: 2019-05-20T09:20:11.999998
-2 milissegundos: 2019-05-20T09:20:11.998
+2 dias: 2019-05-22T09:20:12
+2 semanas: 2019-06-03T09:20:12
+2 meses: 2019-07-20T09:20:12
+2 anos: 2021-05-20T09:20:12
+2 anos: 2021-05-20T09:20:12
+2 décadas: 2039-05-20T09:20:12
-2 dias: 2019-05-18T09:20:12
-2 semanas: 2019-05-06T09:20:12
-2 meses: 2019-03-20T09:20:12
-2 anos: 2017-05-20T09:20:12
-2 décadas: 1999-05-20T09:20:12
----

. `LocalDateTime` é imutável, então é necessário armazenar o retorno de uma alteração em uma variável.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_07_Immutability.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_07_Immutability.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20T09:20
2019-05-20T09:20
2019-05-20T10:20
----

. É comum utilizar o encadeamento de chamadas com esses métodos.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_08_Chaining.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_08_Chaining.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20T09:20
2020-05-21T10:20
----

. Ao manipular a data ou hora, o `LocalDateTime` irá manipular os outros campos conforme necessário.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_09_AdjustDifferentUnit.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_09_AdjustDifferentUnit.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-12-31T23:59:59
2020-01-01T00:00:01
----

==== Instant

Um `Instant` representa um momento na linha do tempo, no fuso horário do https://pt.wikipedia.org/wiki/Tempo_Universal_Coordenado[UTC] (às vezes chamado de https://pt.wikipedia.org/wiki/Tempo_M%C3%A9dio_de_Greenwich[GMT]), como `2007-12-03T10:15:30.125Z`.

O `Instant` difere de todos os tipos apresentados anteriormente, pois possui um fuso horário (UTC) e representa o mesmo momento na linha do tempo em qualquer lugar do mundo.

. O `Instant` é apresentado no formato `ano-mes-diaThora:minuto:segundo.nanoZ`.
. É possível criar um `Instant` através do método `static` chamado `now`.
+
[source,java,indent=0]
.{java-package}/datetime/instant/Instant_02_Now.java
----
include::{section-java-package}/datetime/instant/Instant_02_Now.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-27T21:13:10.450Z
----
+
A saída no console irá apresentar a data e hora atual no fuso horário UTC.

. Também é possível criar um `Instant` através dos métodos `static` chamados `ofEpochMilli` ou `ofEpochSecond`. O parâmetro é a quantidade de milissegundos, ou segundos, desde `1970-01-01T00:00:00Z`.
+
[source,java,indent=0]
.{java-package}/datetime/instant/Instant_03_Of.java
----
include::{section-java-package}/datetime/instant/Instant_03_Of.java[tag=code]
----
+
.Saída no console
[source,console]
----
2001-09-09T01:46:40Z
2001-09-09T01:46:40Z
2001-09-09T01:46:40.123Z
----

. Assim como todas a novas classes de data e hora, não é possível criar uma instância de `Instant` utilizando o construtor.
+
[source,java,indent=0]
.{java-package}/datetime/instant/Instant_04_Constructor.java
----
include::{section-java-package}/datetime/instant/Instant_04_Constructor.java[tag=code]
----

. Existem vários métodos para somar e subtrair de `Instant`. Porém, não suporta operações com unidades maiores do que dias.
+
[source,java,indent=0]
.{java-package}/datetime/instant/Instant_05_Manipulate.java
----
include::{section-java-package}/datetime/instant/Instant_05_Manipulate.java[tag=code]
----
+
.Saída no console
[source,console]
----
2001-09-09T01:46:40Z
+2 segundos: 2001-09-09T01:46:42Z
+2 nanosegundos: 2001-09-09T01:46:40.000000002Z
+2 microssegundos: 2001-09-09T01:46:40.000002Z
+2 milissegundos: 2001-09-09T01:46:40.002Z
-2 segundos: 2001-09-09T01:46:38Z
-2 nanosegundos: 2001-09-09T01:46:39.999999998Z
-2 microssegundos: 2001-09-09T01:46:39.999998Z
-2 milissegundos: 2001-09-09T01:46:39.998Z
+2 dias: 2001-09-11T01:46:40Z
Exception in thread "main" java.time.temporal.UnsupportedTemporalTypeException: Unsupported unit: Weeks
	at java.time.Instant.plus(Instant.java:862)
	at org.j6toj8.localization.datetime.instant.Instant_05_Manipulate.main(Instant_05_Manipulate.java:21)
----

. `Instant` é imutável, então é necessário armazenar o retorno de uma alteração em uma variável.
. Assim como as outras classes de data e hora, é comum utilizar o encadeamento de chamadas com esses métodos.
. Assim como as outras classes de data e hora, ao manipular o `Instant` irá manipular os outros campos conforme necessário.
+
[source,java,indent=0]
.{java-package}/datetime/instant/Instant_06_Immutability.java
----
include::{section-java-package}/datetime/instant/Instant_06_Immutability.java[tag=code]
----
+
.Saída no console
[source,console]
----
2001-09-09T01:46:40Z
2001-09-09T01:46:40Z
2001-09-09T01:47:40Z
----

. Você pode transformar um `LocalDateTime` em um `Instant`, e vice-versa, caso informe um fuso horário, .
+
[source,java,indent=0]
.{java-package}/datetime/instant/Instant_08_Convert.java
----
include::{section-java-package}/datetime/instant/Instant_08_Convert.java[tag=code]
----
+
.Saída no console
[source,console]
----
LocalDateTime: 2019-05-27T13:01:01
2019-05-27T13:01:01Z
2019-05-27T16:01:01Z

Instant: 2019-05-27T13:01:01Z
2019-05-27T13:01:01
2019-05-27T10:01:01
----

==== Period

Um `Period` é uma quantidade de tempo baseado em datas, como anos, meses ou dias. Por exemplo: `2 anos, 3 meses e 4 dias`.

. O `Period` é apresentado no formato `PxYxMxD`, onde:
* `P` representa que é um Period.
* `xY` é a quantidade de anos. 5 anos seria `5Y`.
* `xM` é a quantidade de meses. 3 meses seria `3M`.
* `xD` é a quantidade de dias. 2 dias seria `2D`.
. Ao imprimir um `Period`, apenas os campos com valor são apresentados. Campos zerados são omitidos.
. É possível criar um `Period` através dos métodos `static` chamados `of*`.
+
[source,java,indent=0]
.{java-package}/datetime/period/Period_02_Of.java
----
include::{section-java-package}/datetime/period/Period_02_Of.java[tag=code]
----
+
.Saída no console
[source,console]
----
P2D
P2M
P14D
P2Y
P2Y1M3D
----
+
Perceba que o período de 2 semanas é apresentado como `14D`, pois `Period` não armazena semanas. O método `ofWeeks` é apenas um facilitador, onde cada semana é o equivalente a 7 dias.

. Também é possível criar um `Period` a partir de duas `LocalDate`.
+
[source,java,indent=0]
.{java-package}/datetime/period/Period_03_Between.java
----
include::{section-java-package}/datetime/period/Period_03_Between.java[tag=code]
----
+
.Saída no console
[source,console]
----
P28Y9M22D
----
+
No exemplo anterior podemos ver que uma pessoa nascida no dia `6 de agosto de 1990` possuía `28 anos, 9 meses e 22 dias` de idade no dia em que esse código foi executado: `28/05/2019`.

. `Period` também armazena uma quantidade de dias maior que um mês, e de meses maior que um ano.
+
[source,java,indent=0]
.{java-package}/datetime/period/Period_04_BiggerValues.java
----
include::{section-java-package}/datetime/period/Period_04_BiggerValues.java[tag=code]
----
+
.Saída no console
[source,console]
----
P60M2D
P30M50D
P5Y200M1000D
----
+
Perceba que `Period` não converteu meses em anos, ou dias em meses.

. É possível somar um `Period` a um `Instant`, `LocalDate` ou `LocalDateTime`.
+
[source,java,indent=0]
.{java-package}/datetime/period/Period_05_Compatibility.java
----
include::{section-java-package}/datetime/period/Period_05_Compatibility.java[tag=code]
----
+
.Saída no console
[source,console]
----
Period: P10D

Instant: 2019-05-27T13:01:01Z
Instant + Period: 2019-06-06T13:01:01Z

LocalDate: 2018-05-27
LocalDate + Period: 2018-06-06

LocalDateTime: 2018-05-27T13:01:01
LocalDateTime + Period: 2018-06-06T13:01:01
----

. *Não* é possível somar um `Period` a um `LocalTime`, pois o primeiro representa tempo baseado em datas, e o segundo armazena apenas horários. 
+
[source,java,indent=0]
.{java-package}/datetime/period/Period_06_LocalTime.java
----
include::{section-java-package}/datetime/period/Period_06_LocalTime.java[tag=code]
----
+
.Saída no console
[source,console]
----
Period: P13D
LocalTime: 13:01:01
Exception in thread "main" java.time.temporal.UnsupportedTemporalTypeException: Unsupported unit: Days
	at java.time.LocalTime.plus(LocalTime.java:1055)
	at java.time.LocalTime.plus(LocalTime.java:125)
	at java.time.Period.addTo(Period.java:906)
	at java.time.LocalTime.plus(LocalTime.java:988)
	at org.j6toj8.localization.datetime.period.Period_06_LocalTime.main(Period_06_LocalTime.java:15)
----
+
Veja que ocorreu exceção ao tentar somar um `Period` a um `LocalTime`.

. *Não* é possível somar um `Period` que contém meses ou anos a um `Instant`. Como vimos na seção anterior sobre `Instant`, ele não suporta operações com valores maiores que dias.
+
[source,java,indent=0]
.{java-package}/datetime/period/Period_07_Instant.java
----
include::{section-java-package}/datetime/period/Period_07_Instant.java[tag=code]
----
+
.Saída no console
[source,console]
----
Period: P1M
Instant: 2019-05-27T13:01:01Z
Exception in thread "main" java.time.temporal.UnsupportedTemporalTypeException: Unsupported unit: Months
	at java.time.Instant.plus(Instant.java:862)
	at java.time.Instant.plus(Instant.java:207)
	at java.time.Period.addTo(Period.java:902)
	at java.time.Instant.plus(Instant.java:788)
	at org.j6toj8.localization.datetime.period.Period_07_Instant.main(Period_07_Instant.java:15)
----

==== Duration

.Referências
****

* Working with Dates and Times
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 234). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-8-date-time-intro[Introduction to the Java 8 Date/Time API.]

* https://docs.oracle.com/javase/tutorial/datetime/TOC.html[Trail: Date Time: Table of Contents.] The Java™ Tutorials.

* https://stackoverflow.com/questions/32437550/whats-the-difference-between-instant-and-localdatetime/32443004[What's the difference between Instant and LocalDateTime?]

****