:java-package: src/org/j6toj8/localization
:section-java-package: ../../../{java-package}

=== Formatação de Números e Datas

.Objetivo
--------------------------------------------------
Format dates, numbers, and currency values for localization with the NumberFormat and DateFormat classes, including number and date format patterns.
-
Formatar datas, números e valores monetários para localização utilizando as classes NumberFormat e DateFormat, incluindo padrões de formato de número e data.
--------------------------------------------------

Ainda dentro das ideias de Localização e Internacionalização, é comum a necessidade de apresentar datas, números e valores monetários em diferentes formatos. 

O exame de certificação compreende quatro classes principais de formatação:

* `NumberFormat` -> Formatação geral de números, valores monetários, percentuais e números inteiros com arredondamento, possivelmente baseados em `Locale`.
* `DecimalFormat` -> Formatação de números quando há necessidade de definições mais específicas do formato.
* `DateTimeFormatter` -> Formatação de data e hora após o Java 8.
* `DateFormat` -> Formatação de data e hora antes do Java 8.

==== NumberFormat

. É possível obter uma instância de `NumberFormat` a partir de vários métodos estáticos, dependendo da necessidade.
+
[source,java,indent=0]
.{java-package}/formats/NumberFormat_Instance.java
----
include::{section-java-package}/formats/NumberFormat_Instance.java[tag=code]
----
+
Lembre-se que, se não for informado o `Locale`, será utilizado o padrão. O ideal é sempre informar o `Locale`.

. O `NumberFormat` por ser utilizado para transformar números em Strings.
+
[source,java,indent=0]
.{java-package}/formats/NumberFormat_NumberToString.java
----
include::{section-java-package}/formats/NumberFormat_NumberToString.java[tag=code]
----
+
.Saída no console
[source,console]
----
pt_BR: 1.000,05
en_US: 1,000.05
fr_FR: 1 000,05
----
+
Perceba que a representação do número muda de acordo com o `Locale`.

. O `NumberFormat` por ser utilizado para transformar Strings em números.
+
[source,java,indent=0]
.{java-package}/formats/NumberFormat_StringToNumber.java
----
include::{section-java-package}/formats/NumberFormat_StringToNumber.java[tag=code]
----
+
.Saída no console
[source,console]
----
pt_BR: 1000.05
en_US: 100005
fr_FR: 1000.05
----
+
Perceba que dependendo do `Locale`, estamos representando um número diferente, e isso muda o resultado do parse.

. O `NumberFormat` por ser utilizado para transformar Strings em valores monetários, e vice-versa.
+
[source,java,indent=0]
.{java-package}/formats/NumberFormat_Currency.java
----
include::{section-java-package}/formats/NumberFormat_Currency.java[tag=code]
----
+
.Saída no console
[source,console]
----
pt_BR: R$ 1.000,05
en_US: $1,000.05
fr_FR: 1 000,05 €
pt_BR: 1000.05
Unparseable number: "R$ 1000,05"
Unparseable number: "R$ 1000,05"
----
+
Perceba que novamente o resultado muda de acordo com o `Locale`. Além disso, não é possível converter a representação da moeda brasileira com um `Locale` `en_US` ou `fr_FR`.

. O `NumberFormat` por ser utilizado para transformar Strings em percentuais, e vice-versa.
+
[source,java,indent=0]
.{java-package}/formats/NumberFormat_Percent.java
----
include::{section-java-package}/formats/NumberFormat_Percent.java[tag=code]
----
+
.Saída no console
[source,console]
----
pt_BR: 90%
en_US: 90%
fr_FR: 90 %
pt_BR: 0.8
en_US: 0.8
Unparseable number: "80%"
----
+
Veja que, ao formatar, `100%` é `1`, logo `80%` é `0,8`. Além disso, no `Locale fr_FR` a representação `80%` não é válida.

. O `NumberFormat` pode ficar complicado ao lidar com vírgulas.
+
[source,java,indent=0]
.{java-package}/formats/NumberFormat_Percent2.java
----
include::{section-java-package}/formats/NumberFormat_Percent2.java[tag=code]
----
+
.Saída no console
[source,console]
----
pt_BR: 0.802
en_US: 8.02
----
+
No `Locale pt_BR`, temos o resultado esperado. Porém, no `Locale en_US` o `80,2%` se torna `802%`, pois a vírgula não é usada como separador de decimal.

==== DecimalFormat


==== DateTimeFormatter
==== DateFormat

.Referências
****

* Adding Internationalizationand Localization
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 255). Wiley. Edição do Kindle.

* Formatting and Parsing
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 603). Wiley. Edição do Kindle. 

* https://stackoverflow.com/questions/4772425/change-date-format-in-a-java-string[Change date format in a Java string.] BalusC.

* https://www.baeldung.com/java-8-date-time-intro[Introduction to the Java 8 Date/Time API.]

* https://www.baeldung.com/java-datetimeformatter[Guide to DateTimeFormatter.]

* https://www.baeldung.com/java-decimalformat[A Practical Guide to DecimalFormat.]

* https://www.baeldung.com/java-simple-date-format[A Guide to SimpleDateFormat.]

* https://docs.oracle.com/javase/tutorial/i18n/format/index.html[Lesson: Formatting] The Java™ Tutorials.

* https://docs.oracle.com/javase/tutorial/datetime/iso/format.html[Parsing and Formatting.] The Java™ Tutorials.

* https://docs.oracle.com/javase/tutorial/java/data/numberformat.html[Formatting Numeric Print Output] The Java™ Tutorials.

****