:java-package: src/org/j6toj8/lambda
:section-java-package: ../../../{java-package}

=== Interfaces Funcionais Pré-Construídas (Built-in Interfaces)

.Objetivo
--------------------------------------------------
Develop code that uses the built-in interfaces included in the java.util.function package, such as Function, Consumer, Supplier, UnaryOperator, Predicate, and Optional APIs, including the primitive and binary variations of the interfaces
-
Desenvolver código que usa as interfaces embutidas no pacote java.util.function, como Function, Consumer, Supplier, UnaryOperator, Predicate e a API de Optional, incluindo as variações de tipos primitivos e binários das interfaces
--------------------------------------------------

==== Interfaces Funcionais

===== `Supplier`

. `Supplier` é uma interface funcional que não recebe nenhum parâmetro de entrada, mas retorna um valor. Sua definição na JDK é a seguinte:
+
[source,java,indent=0]
.java.util.function.Supplier<T>
----
@FunctionalInterface
public interface Supplier<T> {
    T get();
}
----

. Uma implementação possível para um `Supplier` é um gerador da data atual:
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_SupplierExample.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_SupplierExample.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-07-08
----
+
A saída no console irá imprimir a data atual. Está sendo apresentada a data em que este código foi escrito.
+
Perceba que a expressão lambda está simplificada, sem chaves `{}` ou `return`. Caso tenha dúvidas com relação a isso, consulte novamente a seção sobre expressões lambda.

. Um `Supplier` pode ser utilizado para fornecer uma função custosa, para que seja chamada apenas se for necessário:
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_SupplierUseCase.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_SupplierUseCase.java[tag=code]
----
+
.Saída no console
[source,console]
----
Menor de idade!
Maior de idade! Validação realizada às 2019-07-09T00:21:35.488
----
+
Perceba que neste caso o supplier só precisou ser chamado na segunda vez, evitando uma execução desnecessária da expressão lambda.

. Existem interfaces `Supplier` para lidar tipos primitivos: `BooleanSupplier`, `IntSupplier`, `LongSupplier` e `DoubleSupplier`.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_SupplierPrimitive.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_SupplierPrimitive.java[tag=code]
----
+
O resultado na console será imprimir o `int` primitivo gerado aleatoriamente.

===== `Consumer` e `BiConsumer`

. `Consumer` é uma interface funcional que recebe um parâmetro de entrada, e não retorna nenhum valor. Sua definição na JDK é a seguinte:
+
[source,java,indent=0]
.java.util.function.Supplier<T>
----
@FunctionalInterface
public interface Consumer<T> {
    void accept(T t);
}
----
 
. `BiConsumer` é uma interface funcional que recebe dois parâmetros de entrada, e não retorna nenhum valor. Sua definição na JDK é a seguinte: 
+
[source,java,indent=0]
.java.util.function.Consumer<T>
----
@FunctionalInterface
public interface BiConsumer<T, U> {
    void accept(T t, U u);
}
----

. Implementações possíveis para `Consumer` ou `BiConsumer` são funções que imprimem informações no console:
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_ConsumerExample.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_ConsumerExample.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-07-08
----

. Existem interfaces `Consumer` para lidar tipos primitivos: `DoubleConsumer`, `IntConsumer`, `LongConsumer`, `ObjDoubleConsumer`, `ObjIntConsumer` e `ObjLongConsumer`.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_ConsumerPrimitive.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_ConsumerPrimitive.java[tag=code]
----

===== `Predicate` e `BiPredicate`

. `Predicate` é uma interface funcional que recebe um parâmetro de entrada e retorna um valor booleano. Sua definição na JDK é a seguinte:
+
[source,java,indent=0]
.java.util.function.Predicate<T>
----
@FunctionalInterface
public interface Predicate<T> {
    boolean test(T t);
}
----
 
. `BiPredicate` é uma interface funcional que recebe dois parâmetros de entrada e retorna um valor booleano. Sua definição na JDK é a seguinte: 
+
[source,java,indent=0]
.java.util.function.BiPredicate<T>
----
@FunctionalInterface
public interface BiPredicate<T, U> {
    boolean test(T t, U u);
}
----

. Implementações possíveis para `Predicate` ou `BiPredicate` são funções que verificam se o valor de entrada é igual ao valor sorteado:
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_PredicateExample.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_PredicateExample.java[tag=code]
----
+
A saída no console é aleatória, pois depende do valor sorteado. Um valor possível seria `false` e `true`.

. Existem interfaces `Predicate` para lidar tipos primitivos: `DoublePredicate`, `IntPredicate` e `LongPredicate`.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_PredicatePrimitive.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_PredicatePrimitive.java[tag=code]
----

===== `Function` e `BiFunction`

. `Function` é uma interface funcional que recebe um parâmetro de entrada e retorna um valor. Sua definição na JDK é a seguinte:
+
[source,java,indent=0]
.java.util.function.Function<T, R>
----
@FunctionalInterface
public interface Function<T, R> {
    R apply(T t);
}
----
 
. `BiFunction` é uma interface funcional que recebe dois parâmetros de entrada e retorna um valor. Sua definição na JDK é a seguinte: 
+
[source,java,indent=0]
.java.util.function.BiFunction<T>
----
@FunctionalInterface
public interface BiFunction<T, U, R> {
    R apply(T t, U u);
}
----

. Implementações possíveis para `Function` ou `BiFunction` são funções que multiplicam os valores fornecidos:
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_FunctionExample.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_FunctionExample.java[tag=code]
----
+
.Saída no console
[source,console]
----
7.5
30.0
----

. Existem várias interfaces `Function` para lidar tipos primitivos: `DoubleFunction`, `DoubleToIntFunction`, `DoubleToLongFunction`, `IntFunction`, `IntToDoubleFunction`, `IntToLongFunction`, `LongFunction`, `LongToDoubleFunction`, `LongToIntFunction`, `ToDoubleBiFunction`, `ToDoubleFunction`, `ToIntBiFunction`, `ToIntFunction`, `ToLongBiFunction`, `ToLongFunction`.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_FunctionPrimitive.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_FunctionPrimitive.java[tag=code]
----
+
.Saída no console
[source,console]
----
7.5
30.0
----

===== `UnaryOperator` e `BinaryOperator`

. `UnaryOperator` é uma interface funcional que recebe um parâmetro de entrada e retorna um valor do mesmo tipo da entrada. Sua definição na JDK é a seguinte:
+
[source,java,indent=0]
.java.util.function.Function<T, R>
----
@FunctionalInterface
public interface UnaryOperator<T> extends Function<T, T> {

}
----
+ Perceba que não existe método abstrato declarado, pois ela apenas estende a interface `Function` já existente.
 
. `BinaryOperator` é uma interface funcional que recebe dois parâmetros de entrada do mesmo tipo, e retorna um valor do mesmo tipo das entradas. Sua definição na JDK é a seguinte: 
+
[source,java,indent=0]
.java.util.function.BiFunction<T>
----
@FunctionalInterface
public interface BinaryOperator<T> extends BiFunction<T,T,T> {

}
----
+ Perceba que não existe método abstrato declarado, pois ela apenas estende a interface `BiFunction` já existente.

. Implementações possíveis para `UnaryOperator` ou `BinaryOperator` são funções que soma um número fixo ou soma um número ao outro:
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_OperatorExample.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_OperatorExample.java[tag=code]
----
+
.Saída no console
[source,console]
----
9
6
----

. Existem interfaces `Operator` para lidar tipos primitivos: `DoubleBinaryOperator`, `DoubleUnaryOperator`, `IntBinaryOperator`, `IntUnaryOperator`, `LongBinaryOperator`, `LongUnaryOperator`.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_OperatorPrimitive.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_OperatorPrimitive.java[tag=code]
----
+
.Saída no console
[source,console]
----
9
6
----

.Referências
****

* Working with Built-In Functional Interfaces
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 173). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-8-functional-interfaces[Functional Interfaces in Java 8.]

* https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html[Package java.util.function.] Java Plataform SE 8.

* http://eherrera.net/ocpj8-notes/04-lambda-built-in-functional-interfaces[Lambda Built-in Functional Interfaces.]

****