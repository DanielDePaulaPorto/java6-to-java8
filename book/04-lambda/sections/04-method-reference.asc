:java-package: src/org/j6toj8/lambda
:section-java-package: ../../../{java-package}

=== Referências a Métodos (Method Reference)

.Objetivo
--------------------------------------------------
Develop code that uses a method reference, including refactoring a lambda expression to a method reference.
-
Desenvolver código que utiliza uma referência a método, incluindo a refatoração de uma expressão lambda para uma referência a método.
--------------------------------------------------

A sintaxe de referência a um método é uma novidade do Java 8. Com ela é possível fazer referência a métodos específicos, em quatro ocasições diferentes:

* Referências a métodos estáticos -> `String::valueOf`
* Referências a métodos de um objeto -> `instanciaDeString::isEmpty`
* Referências a métodos de um tipo de objeto -> `String::isEmpty`
* Referências a construtores -> `String::new`

A seguir serão apresentadas as ocasiões em que cada uma dessas referências é útil.

. Chamadas a métodos estáticos em expressões lambda podem virar uma referência ao método.
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_Static.java
----
include::{section-java-package}/methodreference/MethodReference_Static.java[tag=code]
----
+
.Saída no console
[source,console]
----
5
5
----
+
Essa utilização de _method reference_ só é possível porque:
+
* A implementação de `String.valueOf(int)` satisfaz a interface funcional `Function` (recebe um argumento e retorna um valor).
* O argumento de entrada da expressão lambda `x` é exatamente o mesmo passado para o método `String.valueOf(x)`.
* Essa é a única chamada que essa expressão lambda faz.

. Chamadas a métodos de uma instância também podem ser representados como uma referência a um método.
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_Instance.java
----
include::{section-java-package}/methodreference/MethodReference_Instance.java[tag=code]
----
+
.Saída no console
[source,console]
----
5 - 8
5 - 8
----
+
Essa utilização de _method reference_ só é possível porque:
+
* A implementação de `Conversor.converte(Integer, Integer)` satisfaz a interface funcional `BiFunction` (recebe dois argumentos e retorna um valor).
* Os argumentos de entrada da expressão lambda `x` e `y` são exatamente os mesmos passados para o método `Conversor.converte(Integer, Integer)`.
* Essa é a única chamada que essa expressão lambda faz.

. Chamadas a métodos de um tipo específico, sem especificar a instância, também podem ser representados como uma referência a um método.
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_Type.java
----
include::{section-java-package}/methodreference/MethodReference_Type.java[tag=code]
----
+
.Saída no console
[source,console]
----
8.0
8.0
----
+
Nesse exemplo, a referência está sendo feita ao método `doubleValue` do *tipo* `Integer`. Essa utilização de _method reference_ só é possível porque:
+
* Nossa expressão lambda satisfaz a interface funcional `Function` (recebe um argumento e retorna um valor).
* A expressão lambda recebe um argumento `x` do tipo `Integer`, que possui o método `doubleValue` que não recebe parâmetros.
* Essa é a única chamada que essa expressão lambda faz.

. Também é possível utilizar a referência ao método de um tipo, como no exemplo anterior, mesmo que o método receba parâmetros.
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_TypeWithParam.java
----
include::{section-java-package}/methodreference/MethodReference_TypeWithParam.java[tag=code]
----
+
.Saída no console
[source,console]
----
-1
-1
----
+
Nesse exemplo o compilador "descobre" ainda mais coisas que nos exemplos anteriores. Ao escrever apenas a referência ao método, o compilador entende que a variável `x`, que vem primeiro, será a instância de `Integer` onde o método `compareTo` será chamado. E que `y` é a instância de `Integer` que será passada como argumento para o método `compareTo`.

. Chamadas a um construtor também podem ser representadas como uma referência a um método.
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_Constructor.java
----
include::{section-java-package}/methodreference/MethodReference_Constructor.java[tag=code]
----
+
.Saída no console
[source,console]
----
1
1
----
+
Esse exemplo é muito parecido com o anterior, com a única diferença sendo que o método referenciado é um construtor. Perceba que o construtor também recebe um parâmetro e, assim como no exemplo anterior, o compilador entende que o argumento da função lambda deve ser passado para o construtor que foi chamado.

. Expressões lambda complexas não podem ser convertidas em referência a método, como a expressão abaixo:
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_Complex.java
----
include::{section-java-package}/methodreference/MethodReference_Complex.java[tag=code]
----
+
Como nesse caso temos uma outra `String` `+ "2"` sendo acrescentada no construtor, não há como representar isso com uma simples referência ao construtor.

.Referências
****

* Using Method References
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 152). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-method-references[Method References in Java.]

* https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html[Method References.] The Java™ Tutorials.

****