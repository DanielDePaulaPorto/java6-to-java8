:java-package: src/org/j6toj8/streams
:section-java-package: ../../../{java-package}

=== Utilizando Streams

.Objetivo
--------------------------------------------------
Describe the Stream interface and pipelines; create a stream by using the Arrays.stream() and IntStream.range() methods; identify the lambda operations that are lazy.
-
Descrever a interface e pipelines de Stream; criar um stream utilizando os métodos Arrays.stream() e IntStream.range(); identificar quais operações lambda executam sob demanda (_lazy_).
--------------------------------------------------

Uma das maiores novidades do Java 8 são os __Streams__. Um _Stream_ é basicamente um fluxo de dados. 
Os dados podem ser __Strings__, números, ou qualquer outro objeto.  Esses dados passam por uma série de operações, e o conjunto dessas operações é chamado de __pipeline__. Essas operações são quase sempre representadas por expressões lambda, então é muito importante ter dominado todo o capítulo sobre **lambda**, pois todos aqueles conceitos serão utilizados agora para formar um __Stream__.

A partir dos exemplos a seguir, essa explicação ficará mais clara.

==== Criando um _Stream_

Geralmente, um _Stream_ é criado a partir de um conjunto de dados, como uma lista ou outro tipo de coleção. O objeteivo da certificação deixa explícito que é necessário conhecer os métodos `Arrays.stream()` e ``IntStream.range()``. Mas, além dessas, serão apresentadas também algumas outras formas comuns de criar um __Stream__.

. É possível criar um Stream a partir de um `Array` utilizando o método ``Arrays.stream()``.
+
[source,java,indent=0]
.{java-package}/usingstreams/Stream_ArraysStream.java
----
include::{section-java-package}/usingstreams/Streams_ArraysStream.java[tag=code]
----
+
.Saída no console
[source,console]
----
A
B
C
----
+
Existem 

. É possível criar um Stream a partir de uma faixa de números utilizando o método `IntStream.range()`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Stream_IntRangeStream.java
----
include::{section-java-package}/usingstreams/Streams_IntRangeStream.java[tag=code]
----
+
.Saída no console
[source,console]
----
0
1
2
3
----
+
Perceba que o primeiro argumento (número 0) é inclusivo, enquanto o segundo argumento (número 4) é exclusivo. Por isso a saída no console apresenta apenas os números 0 a 3.

. É possível criar um _Stream_ a partir de uma lista.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_ListStream.java
----
include::{section-java-package}/usingstreams/Streams_ListStream.java[tag=code]
----
+
.Saída no console
[source,console]
----
A
B
C
----

==== Operações em _Streams_

As operações feitas em um _Stream_ irão formar seu __pipeline__. As operações que podem ser realizadas em um Stream são divididas em *operações intermediárias* e **operações finais**. O _Stream_ pode conter inúmeras operações intermediárias, porém somente uma final. Nos exemplos anteriores a única operação utilizada foi o ``forEach``, que é uma operação final. A seguir serão apresentadas outras operações.

===== Operações intermediárias

. skip
. limit
. filter
. distinct
. map
. flatMap
. sorted
. peek

===== Operações finais

. forEach que já estava sendo utilizado
. max, min, count
. findAny, findFirst
. allMatch, anyMatch, noneMatch

===== Pipeline

. Exemplos com várias operações
. Mudar a lista depois de criar o Stream
. Encadeamento de chamada com Optional

===== Execução sob-demanda (__lazy__)

<Explicação>

. Exemplos de lazy

.Referências
****

* Using Streams
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 185). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-8-streams[The Java 8 Stream API Tutorial.]

* https://docs.oracle.com/javase/tutorial/collections/streams/index.html[Lesson: Aggregate Operations.] The Java™ Tutorials.

* https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html[Package java.util.stream.] Java Plataform SE 8.

* https://docs.oracle.com/javase/8/docs/api/?java/util/stream/Stream.html[Interface Stream<T>.] Java Plataform SE 8.

****