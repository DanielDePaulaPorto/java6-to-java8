:java-package: src/org/j6toj8/streams
:section-java-package: ../../../{java-package}

=== Streams Paralelos

.Objetivo
--------------------------------------------------
Develop code that uses parallel streams, including decomposition operation and reduction operation in streams
-
Desenvolver código que usa Streams Paralelos, incluindo operação de decomposição e operação de redução em Streams
--------------------------------------------------

_Streams_ podem ser sequenciais ou paralelos. Os sequencias foram vistos na seção anterior, enquanto os paralelos serão apresentados nesta seção. _Streams_ paralelos são executados por mais de uma _Thread_, geralmente uma quantidade igual à quantidade de núcleos do processador onde a aplicação está sendo executada. Apesar disso, nem sempre é útil utilizá-los. Seu ganho real é em _Streams_ com grande volumes de dados. Em um _Stream_ pequeno, transformá-lo em paralelo pode até causar uma perda de performance.

Ao utilizar qualquer tipo de _Stream_, é recomendável não executar funções lambdas que causem efeitos colaterais, como mudanças no estado de objetos. Em _Streams_ paralelos essa recomendação é ainda mais importante.

. É possível transformar qualquer _Stream_ em paralelo utilizando o método `parallel`.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_Parallel.java
----
include::{section-java-package}/parallelstreams/Streams_Parallel.java[tag=code]
----

. É possível criar _Streams_ paralelos diretamente em Coleções através do método `parallelStream`.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelStream.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelStream.java[tag=code]
----

. Ao utilizar a operação `forEach` em um _Stream_ paralelo, a ordem de execução não é garantida.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelForEach.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelForEach.java[tag=code]
----
+
.Saída no console
[source,console]
----
Sequencial: 
A
B
C
Paralelo: 
B
C
A
----
+
O _Stream_ paralelo poderia ter impresso em qualquer ordem, pois não há nenhuma garantia na ordem em que os elementos serão tratados.

. A operação .forEachOrdered garante que a ordem será mantida mesmo em _Streams_ paralelos.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelForEachOrdered.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelForEachOrdered.java[tag=code]
----
+
.Saída no console
[source,console]
----
Sequencial: 
A
B
C
Paralelo: 
A
B
C
----

. Em coleções com muitos objetos pode haver um ganho considerável de performance.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelPerformance.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelPerformance.java[tag=code]
----
+
.Saída no console
[source,console]
----
Tempo stream sequencial: 9863
Tempo stream paralelo: 1479
----
+
Perceba que na máquina onde o código foi executado, a execução em paralelo demorou apenas 15% do tempo da execução sequencial. Esse não é um teste minucioso, mas mostra o potencial de _Streams_ paralelos.

. Evitar expressões lambda que alteram o estado de um objeto. Exemplo de forEachOrdered e um map com operação stateful.
. Exemplo de findAny com resultados imprevisíveis
. Utilização de unordered para ganhar performance em findFirst, limit, skip
. Reduce com acumuladores associativos (multiplicação)
. Reduce com acumuladores não-associativos (subtração)
. Exemplo com toConcurrentMap
. Exemplo com groupByConcurrent

.Referências
****

* Working with Parallel Streams
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 366). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-8-streams[The Java 8 Stream API Tutorial.]

* https://docs.oracle.com/javase/tutorial/collections/streams/parallelism.html[Parallelism.] The Java™ Tutorials.

* https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html[Package java.util.stream.] Java Plataform SE 8.

* https://docs.oracle.com/javase/8/docs/api/?java/util/stream/Stream.html[Interface Stream<T>.] Java Plataform SE 8.

****